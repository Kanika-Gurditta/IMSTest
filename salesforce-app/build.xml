<!--
# build.properties
#

# Specify the login credentials for the desired Salesforce organization
sf.username = <Insert your Salesforce username here>
sf.password = <Insert your Salesforce password here>
#sf.pkgName = <Insert comma separated package names to be retrieved>
#sf.zipFile = <Insert path of the zipfile to be retrieved>
#sf.metadataType = <Insert metadata type name for which listMetadata or bulkRetrieve operations are to be performed>
#sf.local = <true for development, false on the server where Jenkins runs the CI>

# Use 'https://login.salesforce.com' for production or developer edition (the default if not specified).
# Use 'https://test.salesforce.com for sandbox.
sf.serverurl = https://login.salesforce.com

# If your network requires an HTTP proxy, see http://ant.apache.org/manual/proxy.html for configuration.
# You'll proably need to change the location of ant-salesforce.jar to point to the one you've downloaded
#
-->



<project name="Mobile Surveys tasks" basedir="." xmlns:sf="antlib:com.salesforce">

    <property file="build.properties"/>

     <taskdef resource="com/salesforce/antlib.xml" uri="antlib:com.salesforce">
      <classpath>
          <pathelement location="${sf.antjar}" />
      </classpath>
    </taskdef>


    <!-- default values for undefined properties in the properties file -->
    <property name="sf.local" value="true"/>
    <property name="sf.token" value=""/>
    <property name="temp.folder" value="tmp"/>

    <property environment="env"/>
    <property name="changes.file" value='${temp.folder}/${sf.username}.change'/>
    <property name="zip.file" value='${temp.folder}/${sf.username}.zip'/>
    <property environment="env"/>
    <property name="git.path" value="${env.PROGRAMFILES}\Git"/>
    <property name="git.find.win" value="\bin\find"/>
    <property name="package.xml" value="src/package.xml"/>

 <!--   <property name="static.css" value="static/css"/>
    <property name="static.js"  value="static/js" />
    <property name="static.img" value="static/img"/>

    <property name="resource.css" value="src/staticresources/css.resource"/>
    <property name="resource.js"  value="src/staticresources/js.resource" />
    <property name="resource.img" value="src/staticresources/img.resource"/> -->

    <!-- check if package.xml has postInstallScript defined -->
    <condition property="package-contains-post-install-script">
        <resourcecontains resource="${package.xml}" substring="postInstallClass"/>
    </condition>

    <!-- detect how to open web pages with default program -->
    <condition property="cmd.browser" value="open"><os family="mac"/></condition>
    <condition property="cmd.browser" value="start"><os family="windows"/></condition>
    <condition property="cmd.browser" value="xdg-open"><os family="unix"/></condition>

    <available property="zip.exists" file="${zip.file}"/>

    <target name="zip-all-files" unless="${zip.exists}">
        <zip destfile='${zip.file}.tmp'>
            <fileset dir="src" excludes="staticresources/*"/>
        </zip>
    </target>

    <target name="zip-changed-files" if="${zip.exists}">
        <!-- if windows, get correct path to 'find' command -->
        <condition property="cmd.find" value="${git.path}${git.find.win}" else="find">
            <os family="windows"/>
        </condition>

        <!-- Generate list of files that changed -->
        <delete file="${changes.file}" />
        <exec dir="src" executable="${cmd.find}" output="${changes.file}" failonerror="true">
            <arg line="."/>
            <arg line="-newer"/>
            <arg line="../${zip.file}"/>
        </exec>

        <!-- If no changes were found since last deploy, fail (no need to waste time uploading an empty package) -->
        <fail message="No changes found since last deploy">
            <condition>
              <and>
                <length file="${changes.file}" length="0"/>
                <equals arg1="${sf.local}" arg2="true"/>
              </and>
            </condition>
        </fail>

        <!-- Add package.xml, fix file paths and add metadata files to the list -->
        <echo file="${changes.file}" message="./package.xml" append="true"/>
        <replaceregexp file="${changes.file}" match="-meta.xml" replace="" flags="g" byline="true"/>
        <replaceregexp file="${changes.file}" match="^\.\/?" replace="" flags="g" byline="true" />
        <replaceregexp file="${changes.file}" match="(.*\.(cls|component|page|resource|trigger)$)" replace="\1${line.separator}\1-meta.xml" flags="g"  byline="true"/>

        <!-- Zip changed files -->
        <zip destfile='${zip.file}.tmp' basedir="src" includesfile='${changes.file}'/>
    </target>

    <target name="deploy" depends="zip-all-files,zip-changed-files">
        <!-- Upload the contents of the "codepkg" directory -->
        <sf:deploy username="${sf.username}" password="${sf.password}${sf.token}" serverurl="${sf.serverurl}" zipFile="${zip.file}.tmp" allowMissingFiles="true" pollWaitMillis="50000"/>
        <move file="${zip.file}.tmp" tofile="${zip.file}"/>
    </target>

    <!-- Deploy all sources -->
    <target name="full-deploy">
        <zip destfile="${zip.file}.tmp" basedir="src"/>
        <sf:deploy username="${sf.username}" password="${sf.password}${sf.token}" serverurl="${sf.serverurl}" zipFile="${zip.file}.tmp" pollWaitMillis="50000"/>
        <move file="${zip.file}.tmp" tofile="${zip.file}"/>
    </target>

 <!--   <target name="zip-resources">
        <zip destfile="${resource.js}"  basedir="${static.js}"  whenempty="create"/>
        <zip destfile="${resource.css}" basedir="${static.css}" whenempty="create"/>
        <zip destfile="${resource.img}" basedir="${static.img}" whenempty="create"/>
    </target> -->

    <target name="test">
        <!-- Runs all tests for the current state -->
        <sf:deploy username="${sf.username}" password="${sf.password}${sf.token}" serverurl="${sf.serverurl}" deployRoot="src" runAllTests="true" checkOnly="true" logType="None" maxPoll="100" pollWaitMillis="50000"/>
    </target>

    <target name="deploy-test">
        <sf:deploy username="${sf.username}" password="${sf.password}${sf.token}" serverurl="${sf.serverurl}" deployRoot="src" runAllTests="true" logType="None" maxPoll="100" pollWaitMillis="50000"/>
    </target>

    <!-- Shows retrieving code; only succeeds if done after deployCode -->
    <target name="retrieve">
      <!-- Retrieve the contents listed in the file codepkg/package.xml into the codepkg directory -->
      <sf:retrieve username="${sf.username}" password="${sf.password}${sf.token}" serverurl="${sf.serverurl}" retrieveTarget="src" packageNames="TaroWorks" pollWaitMillis="50000"/>
    </target>

    <!-- Asserts that the code can be deployed and all tests run correctly. -->
    <target name="validate-package">
        <!-- Upload the contents of the "codepkg" directory, running all tests -->
        <sf:deploy
            username="developer@grameen.dpck"
            password="salesforce2"
            serverurl="https://login.salesforce.com"
            deployRoot="src"
            runAllTests="true"
            checkOnly="true"
            pollWaitMillis="50000"/>
    </target>

    <!-- Define postInstallClass in package.xml if it's not defined already -->
    <target name="add-post-install-script-to-package-xml" unless="${package-contains-post-install-script}">
        <replaceregexp
            file="${package.xml}"
            match="([\W\S])/fullName>"
            replace="\1/fullName>${line.separator}    \1apiAccessLevel>Unrestricted\1/apiAccessLevel>${line.separator}    \1postInstallClass>PostInstallScript\1/postInstallClass>" />
    </target>

    <!-- open default browser and navigate to packages page -->
    <target name="open-browser-on-package-manager">
        <exec dir="src" executable="${cmd.browser}" spawn="true">
            <arg line="${sf.serverurl}?un=${sf.username}&amp;pw=${sf.password}&amp;startURL=%2F0A2"/>
        </exec>
    </target>

    <target name="release"
        depends="add-post-install-script-to-package-xml,full-deploy,open-browser-on-package-manager"/>

      <!-- used by the managed package automatic build in Jenkins -->
    <target name="autorelease"
        depends="add-post-install-script-to-package-xml,full-deploy"/>

    <!-- This will be used to undeploy any code base from an org. -->
    <!-- Please make sure desctructive folder is present with destructive xml -->
    <target name="undeploy">
        <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployRoot="destructive"/>
    </target>

</project>
